2008-12-22 15:26 

I came up with a pretty good way to take a doubly-linked list of
pillars in a column, and cut a gap in them.  But doing the reverse
seems like it might involve code duplication, and I can't think of a
pretty way to manage the network of connections between pillars.
Maybe a better representation is necessary.  Since we might have to
use sprites anyways, maybe we might as well have individual objects
for individual blocks?

2008-12-24 00:33

Dad and Eric convinced me to just simulate, block-by-block, the
stresses experienced.  And I think I've got a good implementation of
Ford-Fulkerson to do just that incrementally as blocks are added and
removed.  Now I need to come up with a display scheme.  I should
probably just use the current one (iterating over a fixed range),
possibly modified by using Sprite s, until I've got the dungeon
dynamics tested.  Figuring out a list of blocks that are in the
current bounding box seems hard, though it occurs to me that, by
making an artifical limit on z's range (since we fade out below that
anyways), we can just iterate over the bounding box, and that'll be
mostly right, anyways.

I probably ought to write tests for F-F flow when I start working out
bugs tomorrow.

2008-12-24 11:37

Refactoring out F-F flow right now.  I'm thinking about having sprites
add themselves (and all coincident sprites above them) to a heap every
time they get updated.  Need to make it so that removing a block
real-izes the adjacent blocks, but real-izing a block only real-izes
blocks above it (and not empty space!).  I believe this means that the
only non-real blocks we'll ever display are the top blocks in their
columns.

2008-12-24 14:40

Graphics on the rebuilt sprites-based are starting to work.  Still
need to make the realizing stuff work.

2008-12-24 16:15

Yay!  Graphics work.  To do: realize blocks when necessary.  Display
blocks when revealed.  Hook up fff.  Fix fff.

2008-12-24 18:21

Also to do: take care of stress being borne by a virtual block being
realized.

2008-12-24 19:16

Yay!  Stress looks like it's being calculated right!  It's looks like
it's being displayed wrong by a factor of two, but it's behaving about
right.

2008-12-25 21:06

Rewrote the depth-first search into a breadth-first search.  I think
that there are still some cases in which flow isn't being resolved.

2008-12-26 23:23

Worked out a couple bugs, and underground digging is going pretty
nicely.  One (known) difficulty with stress delivery remains, however.
Suppose we have the following situation, where V is a virtual block,
and R is a real one:
    [V1][R1][V2][V3]
    [R2]    [R3][R4]
...and R1 is stressing on V2.  If R3 were removed, and V2 were to be
realized, it would be far better for R1 to switch to stressing on V1,
but instead we have a chain of stress streching to V3.  Perhaps we
should reflow each edge individually when we realize a node?  Will
that be good enough?  Maybe so...

2008-12-26 23:35

Something more sinister may be going on here.  By chasing the
subterranean stress around, it's possible to create a chain that is
bearing, say, 16/6 stress (even though it doesn't have to be), and yet
still won't fall down.  

2008-12-27 00:27

Well.  Restructured code a lot, using properties and other fanciness.
Oddly, it works quite similarly to the way it used to, excepting that
it no longer gives stress warnings or displays stress.  Oh.  Right.
That would be because I'm using stress_on[...] += instead of
add_stress().  Much better.  The fundamental problem isn't solved.  In
fact, I don't remember why it was supposed to be.  Oh, right, I still
need to rewrite cut_links().  Well, that's for tomorrow.